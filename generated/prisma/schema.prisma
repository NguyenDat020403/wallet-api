generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model audit_logs {
  log_id       String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id      String?   @db.Uuid
  action       String    @db.VarChar(255)
  target_table String?   @db.VarChar(255)
  target_id    String?   @db.Uuid
  created_at   DateTime? @default(now()) @db.Timestamp(6)
  users        users?    @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
}

model networks {
  network_id         String            @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  network_name       String            @db.VarChar(255)
  symbol             String            @db.VarChar(255)
  thumbnail          String?           @db.VarChar(255)
  chain_id           String            @db.VarChar(255)
  block_explorer_url String?           @db.VarChar(255)
  price_feed_id      String?           @db.VarChar(255)
  is_default_network Boolean           @default(false)
  is_testnet         Boolean           @default(false)
  rpc_url            String            @db.VarChar(255)
  created_at         DateTime?         @default(now()) @db.Timestamp(6)
  updated_at         DateTime?         @default(now()) @db.Timestamp(6)
  deleted_at         DateTime?         @db.Timestamp(6)
  creator_id         String?           @db.Uuid
  isEVM              Boolean           @default(false)
  users              users?            @relation(fields: [creator_id], references: [user_id], onUpdate: NoAction)
  token_networks     token_networks[]
  wallet_networks    wallet_networks[]
}

model token_networks {
  token_network_id      String                  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  token_id              String?                 @db.Uuid
  network_id            String?                 @db.Uuid
  contract_address      String                  @db.VarChar(255)
  networks              networks?               @relation(fields: [network_id], references: [network_id], onDelete: Cascade, onUpdate: NoAction)
  tokens                tokens?                 @relation(fields: [token_id], references: [token_id], onDelete: Cascade, onUpdate: NoAction)
  wallet_network_tokens wallet_network_tokens[]

  @@unique([token_id, network_id])
  @@index([network_id], map: "idx_token_networks_network_id")
  @@index([token_id], map: "idx_token_networks_token_id")
}

model tokens {
  token_id           String           @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  token_name         String           @db.VarChar(255)
  symbol             String           @db.VarChar(255)
  decimals           Int
  thumbnail          String?          @db.VarChar(255)
  price_feed_id      String?          @db.VarChar(255)
  percent_change_24h String?          @db.VarChar(255)
  created_at         DateTime?        @default(now()) @db.Timestamp(6)
  updated_at         DateTime?        @default(now()) @db.Timestamp(6)
  deleted_at         DateTime?        @db.Timestamp(6)
  token_networks     token_networks[]
}

model users {
  user_id       String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  username      String       @db.VarChar(255)
  avatar        String?      @db.VarChar(255)
  bio           String?      @db.VarChar(255)
  email         String       @unique @db.VarChar(255)
  password_hash String       @db.VarChar(255)
  created_at    DateTime?    @default(now()) @db.Timestamp(6)
  updated_at    DateTime?    @default(now()) @db.Timestamp(6)
  deleted_at    DateTime?    @db.Timestamp(6)
  notiToken     String?      @db.VarChar
  audit_logs    audit_logs[]
  networks      networks[]
  wallets       wallets[]
}

model wallet_network_tokens {
  wallet_network_token_id String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  token_network_id        String?         @db.Uuid
  wallet_id               String?         @db.Uuid
  balance                 Decimal         @default(0) @db.Decimal(20, 8)
  updated_at              DateTime?       @default(now()) @db.Timestamp(6)
  token_networks          token_networks? @relation(fields: [token_network_id], references: [token_network_id], onDelete: Cascade, onUpdate: NoAction)
  wallets                 wallets?        @relation(fields: [wallet_id], references: [wallet_id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([token_network_id, wallet_id])
  @@index([wallet_id], map: "idx_wallet_network_tokens_wallet_id")
}

model wallet_networks {
  wallet_network_id String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  wallet_id         String?   @db.Uuid
  network_id        String?   @db.Uuid
  address           String    @db.VarChar(255)
  created_at        DateTime? @default(now()) @db.Timestamp(6)
  updated_at        DateTime? @default(now()) @db.Timestamp(6)
  networks          networks? @relation(fields: [network_id], references: [network_id], onDelete: Cascade, onUpdate: NoAction)
  wallets           wallets?  @relation(fields: [wallet_id], references: [wallet_id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([wallet_id, network_id])
}

model wallets {
  wallet_id             String                  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id               String?                 @db.Uuid
  wallet_name           String                  @db.VarChar(255)
  wallet_balance        Decimal                 @default(0) @db.Decimal(20, 8)
  wallet_address        String                  @db.VarChar(255)
  wallet_phrase         String?                 @db.VarChar(255)
  created_at            DateTime?               @default(now()) @db.Timestamp(6)
  updated_at            DateTime?               @default(now()) @db.Timestamp(6)
  deleted_at            DateTime?               @db.Timestamp(6)
  wallet_network_tokens wallet_network_tokens[]
  wallet_networks       wallet_networks[]
  users                 users?                  @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)

  @@index([user_id], map: "idx_wallets_user_id")
}
